// <auto-generated />
using System;
using FamChron.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FamChron.API.Migrations
{
    [DbContext(typeof(CorrectionDbContext))]
    partial class FamChronDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FamChron.API.Entities.Character", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoryID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Description = "I love coffee",
                            EventID = 1,
                            Name = "Coffee",
                            StoryID = 1
                        });
                });

            modelBuilder.Entity("FamChron.API.Entities.Event", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviewPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoryID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Date = new DateTime(2023, 4, 26, 17, 40, 55, 186, DateTimeKind.Utc).AddTicks(7702),
                            Description = "wOw",
                            Name = "First step",
                            Photos = "None",
                            PreviewPhoto = "None",
                            StoryID = 1
                        });
                });

            modelBuilder.Entity("FamChron.API.Entities.Story", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Stories");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Name = "The Beginning"
                        });
                });

            modelBuilder.Entity("FamChron.API.Entities.TimeLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventsIds")
                        .HasColumnType("int");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TileLines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventsIds = 1,
                            StoryId = 1
                        });
                });

            modelBuilder.Entity("FamChron.API.Entities.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            id = 1,
                            UserName = "Lubimec"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
